// Package crmcontrol provides a low-level API to manage Pacemaker.
//
// The functions in this module are called by the high-level API in package
// iscsi to perform operations in the CRM subsystem, such as creating the
// primitives and constraints that configure iSCSI targets, logical units and
// the associated service IP addresses.
// The 'cibadmin' utility is used to modify the cluster's CIB (cluster
// information base).
// The CIB is modified by
//   - sending XML entries, created from templates, to create new primitives & constraints,
//     much like a macro processor
//   - reading and parsing the current CIB XML, and modifying the contents
//     (e.g. removing tags and their nested tags) to delete existing entries from
//     the cluster configuration.
// The 'etree' package is used for XML parsing and modification.
package crmcontrol

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"strconv"
	"strings"
	"text/template"
	"time"

	"github.com/LINBIT/gopacemaker/cib"
	"github.com/LINBIT/linstor-gateway/pkg/crmtemplate"
	"github.com/LINBIT/linstor-gateway/pkg/nfsbase"
	"github.com/google/uuid"
	log "github.com/sirupsen/logrus"

	xmltree "github.com/beevik/etree"
)

// Initial delay after setting resource target-role=Stopped before starting to poll the CIB
// to check whether resources have actually stopped
const waitStopPollCibDelay = 2500

// CrmConfiguration stores information about (Pacemaker) CRM resources
type CrmConfiguration struct {
	IPs         []*IP
	Mountpoints []*FSMount
	NFSExports  []*ExportFS
}

type IP struct {
	ID      string
	IP      net.IP
	Netmask uint8
}

type FSMount struct {
	ID         string
	Device     string
	Directory  string
	Filesystem string
}

type ExportFS struct {
	ID             string
	Directory      string
	AllowedIPs     net.IP
	AllowedIPsMask uint8
	FSID           string
}

type ResourceRunState struct {
	TargetState cib.LrmRunState           `json:"target"`
	LUStates    map[uint8]cib.LrmRunState `json:"luns"`
	IPState     cib.LrmRunState           `json:"ip"`
	OnNode      string                    `json:"on_node"`
}

type NFSRunState struct {
	MountpointState cib.LrmRunState `json:"mountpoint"`
	ExportFSState   cib.LrmRunState `json:"exportfs"`
	ServiceIPState  cib.LrmRunState `json:"serviceip"`
	OnNode          string          `json:"on_node"`
}

func checkNFSExists(cibObj *cib.CIB, resourceName string) bool {
	// TODO: Maybe replace the magic values with constants
	resourceId := "p_nfs_" + resourceName + "_exp"

	elem := cibObj.FindResource(resourceId)
	if elem == nil {
		log.Debug(fmt.Sprintf("Resource \"%s\" not found", resourceId))
	}

	return elem != nil
}

func generateCreateNFSXML(nfsCfg nfsbase.NFSConfig, storageNodes []string,
	device string, directory string) (string, error) {
	log.Debug("crmcontrol.go generateCreateNFSXML: Genearting fsid UUID")
	FSID, err := uuid.NewRandom()
	if err != nil {
		return "", err
	}

	log.Debug("crmcontrol.go generateCreateNFSXML: Setting template variables")
	allowedIPsMask := net.CIDRMask(nfsCfg.AllowedIPsNetBits, 32)
	allowedIPs := fmt.Sprintf("%s/%d.%d.%d.%d", nfsCfg.AllowedIPs,
		allowedIPsMask[0], allowedIPsMask[1], allowedIPsMask[2], allowedIPsMask[3])
	bracketedAllowedIPs := allowedIPs
	if strings.IndexByte(allowedIPs, ':') != -1 {
		bracketedAllowedIPs = "[" + allowedIPs + "]"
	}
	tmplVars := map[string]interface{}{
		"ResourceName":        nfsCfg.ResourceName,
		"ServiceIP":           nfsCfg.ServiceIP.String(),
		"ServiceIPNetBits":    strconv.Itoa(nfsCfg.ServiceIPNetBits),
		"AllowedIPs":          allowedIPs,
		"BracketedAllowedIPs": bracketedAllowedIPs,
		"Directory":           directory,
		"FsId":                FSID.String(),
		"StorageNodes":        storageNodes,
		"StorageNodesList":    strings.Join(storageNodes, ","),
		"Device":              device,
	}

	for key, value := range tmplVars {
		log.Debugf("%-24s = %s\n", key, value)
	}

	log.Debug("crmcontrol.go generateCreateNFSXML: Loading template")
	nfsTmpl := template.Must(template.New("crmnfs").Parse(crmtemplate.CRM_NFS))

	log.Debug("crmcontrol.go generateCreateNFSXML: Building template")
	var cibData bytes.Buffer
	err = nfsTmpl.Execute(&cibData, tmplVars)
	return cibData.String(), err
}

// CreateNFS creates CRM resource for an NFS export
//
// The resources created depend on the contents of the template for resource creation.
// Typically, it's a Filesystem mount, an NFS export and a service IP address, along
// with constraints that bundle them and place them on the selected nodes
func CreateNFS(nfsCfg nfsbase.NFSConfig, storageNodes []string,
	device string, directory string) error {
	log.Debug("crmcontrol.go CreateNFS: Generating XML template")
	var cibObj cib.CIB
	// Load the template for modifying the CIB
	cibDiffData, err := generateCreateNFSXML(nfsCfg, storageNodes, device, directory)
	if err != nil {
		return err
	}
	log.Debug("crmcontrol.go CreateNFS: Updating CIB")
	return cibObj.CreateResource(cibDiffData)
}

func DeleteNFS(nfsCfg nfsbase.NFSConfig) error {
	var cibObj cib.CIB
	// Read the current CIB XML
	err := cibObj.ReadConfiguration()
	if err != nil {
		return err
	}

	// TODO: Maybe replace those magic values with constants
	var idList []string
	idList = append(idList, "p_nfs_"+nfsCfg.ResourceName+"_fs")
	idList = append(idList, "p_nfs_"+nfsCfg.ResourceName+"_exp")
	idList = append(idList, "p_nfs_"+nfsCfg.ResourceName+"_ip")

	// Stop resources
	for _, id := range idList {
		err = cibObj.StopResource(id)
		if err != nil {
			log.WithFields(
				log.Fields{
					"resource": id,
				},
			).Warning("Could not set target-role. Resource will probably fail to stop: ", err)
		}
	}
	err = cibObj.Update()
	if err != nil {
		return err
	}

	time.Sleep(time.Duration(waitStopPollCibDelay * time.Millisecond))
	isStopped, err := cibObj.WaitForResourcesStop(idList)
	if err != nil {
		return err
	}

	if !isStopped {
		return errors.New("Resource stop was not confirmed for all resources, cannot continue delete action")
	}

	// Read the current CIB XML again
	err = cibObj.ReadConfiguration()
	if err != nil {
		return err
	}

	// Remove contraints
	cibObj.DissolveConstraints(idList)

	for _, id := range idList {
		rscElem := cibObj.FindResource(id)
		if rscElem != nil {
			rscElemParent := rscElem.Parent()
			if rscElemParent != nil {
				rscElemParent.RemoveChildAt(rscElem.Index())
			} else {
				return errors.New("Cannot modify CIB, CRM resource '" + id + "' has no parent object")
			}
		} else {
			fmt.Printf("Warning: CIB resource '%s' not found in the CIB\nb", id)
		}
	}

	return cibObj.Update()
}

func ProbeNFSResource(resourceName string) (NFSRunState, error) {
	state := NFSRunState{
		MountpointState: cib.Unknown,
		ExportFSState:   cib.Unknown,
		ServiceIPState:  cib.Unknown,
		OnNode:          "",
	}

	var cibObj cib.CIB

	// Read the current CIB XML
	err := cibObj.ReadConfiguration()
	if err != nil {
		return state, err
	}

	exists := checkNFSExists(&cibObj, resourceName)
	if !exists {
		return state, errors.New("Resource \"" + resourceName + "\" not found")
	}

	state.MountpointState = cibObj.FindLrmState("p_nfs_" + resourceName + "_fs")
	state.ExportFSState = cibObj.FindLrmState("p_nfs_" + resourceName + "_exp")
	state.ServiceIPState = cibObj.FindLrmState("p_nfs_" + resourceName + "_ip")

	state.OnNode = cibObj.GetNodeOfResource("p_nfs_" + resourceName + "_exp")

	return state, nil
}

func findMountpoints(rscSection *xmltree.Element) []*FSMount {
	mountpoints := make([]*FSMount, 0)
	for _, mntElem := range rscSection.FindElements("./primitive[@type='Filesystem']") {
		// Get ID
		id := mntElem.SelectAttr("id")

		if id != nil {
			contextLog := log.WithFields(log.Fields{"id": id.Value})

			// Get Device, Directory, FSType
			device, deviceErr := cib.GetNvPairValue(mntElem, "device")
			directory, directoryErr := cib.GetNvPairValue(mntElem, "directory")
			fsType, fsTypeErr := cib.GetNvPairValue(mntElem, "fstype")

			if device != nil && directory != nil && fsType != nil {
				mntEntry := &FSMount{
					ID:         id.Value,
					Device:     device.Value,
					Directory:  directory.Value,
					Filesystem: fsType.Value,
				}
				mountpoints = append(mountpoints, mntEntry)
			} else {
				if deviceErr != nil {
					contextLog.Debug("\"Filesystem\" primitive has no \"device\" parameter: ", deviceErr)
				}
				if directoryErr != nil {
					contextLog.Debug("\"Filesystem\" primitive has no \"directory\" parameter: ", directoryErr)
				}
				if fsTypeErr != nil {
					contextLog.Debug("\"Filesystem\" primitive has no \"fstype\" parameter: ", fsTypeErr)
				}
			}
		} else {
			log.Debug("CIB contains a \"Filesystem\" primitive without an ID")
		}
	}
	return mountpoints
}

func findNFSExports(rscSection *xmltree.Element) []*ExportFS {
	nfsExports := make([]*ExportFS, 0)
	for _, expElem := range rscSection.FindElements("./primitive[@type='exportfs']") {
		// Get ID
		id := expElem.SelectAttr("id")

		if id != nil {
			contextLog := log.WithFields(log.Fields{"id": id.Value})

			// Get directory, FS id & clientSpec client IP addresses
			directory, directoryErr := cib.GetNvPairValue(expElem, "directory")
			FSID, FSIDErr := cib.GetNvPairValue(expElem, "fsid")
			clientSpecPrm, clientSpecErr := cib.GetNvPairValue(expElem, "clientspec")

			if directory != nil && clientSpecPrm != nil && FSID != nil {
				// FIXME: Needs IPv6 handling
				net, netMask, err := parseIPv4Net(clientSpecPrm.Value)
				if err == nil {
					expEntry := &ExportFS{
						ID:             id.Value,
						Directory:      directory.Value,
						AllowedIPs:     net,
						AllowedIPsMask: netMask,
						FSID:           FSID.Value,
					}
					nfsExports = append(nfsExports, expEntry)
				} else {
					contextLog.Debug("\"exportfs\" primitive has an invalid \"clientspec\" parameter: ", err)
				}
			} else {
				if directoryErr != nil {
					contextLog.Debug("\"exportfs\" primitive has no \"device\" parameter: ", directoryErr)
				}
				if clientSpecErr != nil {
					contextLog.Debug("\"exportfs\" primitive has no \"clientSpec\" parameter: ", clientSpecErr)
				}
				if FSIDErr != nil {
					contextLog.Debug("\"exportfs\" primitive has no \"fsid\" parameter: ", FSIDErr)
				}
			}
		}
	}
	return nfsExports
}

// parseIPv4Net parses an IP/netmask combination in a format like
// "192.168.0.0/255.255.0.0". It returns the network address as well as the
// netmask in CIDR format ("192.168.0.0" and 16 in this example), and an error
// if one occurred.
func parseIPv4Net(clientSpecPrm string) (net.IP, uint8, error) {
	prmParts := strings.Split(clientSpecPrm, "/")
	if len(prmParts) != 2 {
		return nil, 0, errors.New("Invalid IP/Net parameter")
	}

	network := net.ParseIP(prmParts[0])
	if network == nil {
		return nil, 0, errors.New("Unparsable IP address")
	}
	maskData := net.ParseIP(prmParts[1])
	if maskData == nil {
		return nil, 0, errors.New("Unparsable subnet mask")
	}
	maskDataV4 := maskData.To4()
	if maskDataV4 == nil {
		return nil, 0, errors.New("Netmask is not in IPv4 format")
	}
	netmask := net.IPv4Mask(maskDataV4[0], maskDataV4[1], maskDataV4[2], maskDataV4[3])
	cidr, _ := netmask.Size()

	return network, uint8(cidr), nil
}
